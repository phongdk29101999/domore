# /bin/bash

# Define color
YELLOW='\033[1;33m'
GREEN='\033[0;32m'
RED='\033[0;31m'
NC='\033[0m'    # No Color
#################################
# Help                          #
#################################
Help()
{
    # Display help
    printf "${YELLOW}Description:${NC}\n"
    printf "  Domore CLI \n"
    printf "${YELLOW}Usage:${NC}\n"
    printf "    ./domore-cli command [options] [arguments]\n"
    printf "${YELLOW}Options:${NC}\n"
    printf "    ${GREEN}-h, --help${NC}             Display this help message\n"
    printf "${YELLOW}Avaiable commands:${NC}\n"
    printf "  ${YELLOW}init${NC}\n"
    printf "    ${GREEN}init:file${NC}              Init neccessary file\n"
    printf "    ${GREEN}init:ip${NC}                Init static ip for MacOS\n"
    printf "  ${YELLOW}load${NC}\n"
    printf "    ${GREEN}load:db${NC}                Import sql file to database\n"
    printf "    ${GREEN}load:env${NC}               Load env file\n"
    printf "    ${GREEN}load:host${NC}              Load hosts name\n"
    printf "    ${GREEN}load:package${NC}           Load package\n"
}

#################################
# InitFileHelp                  #
#################################
InitFileHelp()
{
    # Display help
    printf "${YELLOW}Description:${NC}\n"
    printf "  Init neccessary file\n"
    printf "${YELLOW}Usage:${NC}\n"
    printf "    ${GREEN}./domore-cli init:file [option] [argument]${NC}\n"
    printf "${YELLOW}Option:${NC}\n"
    printf "    ${GREEN}-h, --help${NC}             Display this help message\n"
    printf "${YELLOW}Arguments:${NC}\n  Choose your operation system name\n"
    printf "    ${GREEN}ubuntu${NC}\n"
    printf "    ${GREEN}macos-intel${NC}\n"
    printf "    ${GREEN}macos-m1${NC}\n"
}

#################################
# InitFile                      #
#################################
InitFile()
{
    # Set variables
    OS=""

    if [ $1 -eq 1 ]
    then
        echo "${RED}Error:${NC} No argument passed after command init:file"
        exit
    fi

    if [ $1 -eq 2 ]
    then
        case $2 in
            ubuntu)
                OS="Ubuntu";;
            macos-intel)
                OS="MacOS Intel";;
            macos-m1)
                OS="MacOS M1";;
            -h | --help)
                InitFileHelp
                exit;;
            *)
                echo "${RED}Error:${NC} Invalid argument!"
                echo "${RED}Error:${NC} Command init:file doesn't have argument \"$2\""
                exit;;
        esac
    fi

    if [ $1 -gt 2 ]
    then
        echo "${RED}Error:${NC} Too much arguments passed after command init:file"
        exit
    fi
    echo "${GREEN}Operation system name: $OS${NC}"
}

#################################
# InitIPHelp                    #
#################################
InitIPHelp()
{
    # Display help
    printf "${YELLOW}Description:${NC}\n"
    printf "  Init ip static for macos\n"
    printf "${YELLOW}Usage:${NC}\n"
    printf "    ${GREEN}./domore-cli init:ip [option]${NC}\n"
    printf "${YELLOW}Option:${NC}\n"
    printf "    ${GREEN}-h, --help${NC}             Display this help message\n"
}

#################################
# InitIP                        #
#################################
InitIP()
{
    if [ $1 -eq 2 ]
    then
        case $2 in
            -h | --help)
                InitIPHelp
                exit;;
            *)
                echo "${RED}Error:${NC} Invalid argument!"
                echo "${RED}Error:${NC} Command init:ip doesn't have argument \"$2\""
                exit;;
        esac
    fi
    if [[ "$OSTYPE" != "darwin"* ]]
    then
        printf "${RED}Error:${NC} Command not found!\n"
        exit
    fi
    sudo ifconfig lo0 alias 10.10.0.4
    sudo ifconfig lo0 alias 10.10.0.6
    sudo ifconfig lo0 alias 10.10.0.9
    printf "${GREEN}Init static ip for macos successfully${NC}\n"
}

#################################
# Init                          #
#################################
Init()
{
    cp Dockerfile.example Dockerfile
    cp ./php/local.ini.example ./php/local.ini
    cp ./nginx/conf.d/app.conf.example ./nginx/conf.d/app.conf
    cp ./mysql/my.cnf.example ./mysql/my.cnf
    cp .env.example .env
    case $1 in
        ubuntu)
            cp docker-compose.yml.ubuntu.example docker-compose.yml
            ;;
        macos-intel)
            cp docker-compose.yml.macos-intel.example docker-compose.yml
            ;;
        macos-m1)
            cp docker-compose.yml.macos-m1.example docker-compose.yml
            ;;
    esac
    echo "${GREEN}Init neccessary file successfully${NC}"
}

#################################
# LoadDB                        #
#################################
LoadDB()
{
    if [ $1 -eq 1 ]
    then
        echo "${RED}Error:${NC} No argument passed after command load:db"
        exit
    fi

    if [ $1 -eq 2 ]
    then
        case $2 in
            -h | --help)
                LoadDBHelp
                exit;;
            *)
                echo "${RED}Error:${NC} Invalid argument!"
                echo "${RED}Error:${NC} Command load:db doesn't have argument \"$2\""
                exit;;
        esac
    fi

    if [ $1 -eq 3 ]
    then
        case $2 in
            -f | --file)
                filename="$(basename $3)"
                docker cp $3 database:/
                docker-compose exec database mysql -u root -psecret domore < $filename
                printf "${GREEN}Import sql file to database successfully${NC}\n"
                exit;;
            *)
                echo "${RED}Error:${NC} Invalid option!"
                echo "${RED}Error:${NC} Command load:db doesn't have option \"$2\""
                exit;;
        esac
    fi
}

#################################
# LoadDBHelp                    #
#################################
LoadDBHelp()
{
    # Display help
    printf "${YELLOW}Description:${NC}\n"
    printf "  Import sql file to database\n"
    printf "${YELLOW}Usage:${NC}\n"
    printf "    ${GREEN}./domore-cli load:db [option] [argument]${NC}\n"
    printf "${YELLOW}Option:${NC}\n"
    printf "    ${GREEN}-f, --file${NC}             Import to database without default file\n"
    printf "    ${GREEN}-h, --help${NC}             Display this help message\n"
}

#################################
# LoadENV                       #
#################################
LoadENV()
{
    if [ $1 -eq 1 ]
    then
        docker-compose exec app wget --no-check-certificate 'https://docs.google.com/uc?export=download&id=1mbCpq1uWbEJ5xEEd1NyOT7H8gIrSgYPs' -O env.txt
        cp env.txt .env
        rm -f env.txt
        printf "${GREEN}Load env file successfully${NC}\n"
        exit
    fi

    if [ $1 -eq 2 ]
    then
        case $2 in
            -h | --help)
                LoadENVHelp
                exit;;
            *)
                echo "${RED}Error:${NC} Invalid option!"
                echo "${RED}Error:${NC} Command load:env doesn't have option \"$2\""
                exit;;
        esac
    fi

    if [ $1 -gt 2 ]
    then
        echo "${RED}Error:${NC} Too much arguments passed after command load:env"
        exit
    fi
}

#################################
# LoadENVHelp                   #
#################################
LoadENVHelp()
{
    # Display help
    printf "${YELLOW}Description:${NC}\n"
    printf "  Load env file\n"
    printf "${YELLOW}Usage:${NC}\n"
    printf "    ${GREEN}./domore-cli load:env [option]${NC}\n"
    printf "${YELLOW}Option:${NC}\n"
    printf "    ${GREEN}-h, --help${NC}             Display this help message\n"
}

#################################
# LoadHost                      #
#################################
LoadHost()
{
    host1="$(grep -n domore.test.com /etc/hosts | cut -f1 -d:)"
    host2="$(grep -n minio /etc/hosts | cut -f1 -d:)"
    if [ $1 -eq 1 ]
    then
        echo "Loading hosts name"
        if [ "$host1" == "" ]
        then
            sudo -- sh -c -e "echo '10.10.0.6     domore.test.com' >> /etc/hosts"
        fi
        if [ "$host2" == "" ]
        then
            sudo -- sh -c -e "echo '10.10.0.9     minio' >> /etc/hosts"
        fi
        printf "${GREEN}Load hosts name successfully${NC}\n"
        exit
    fi

    if [ $1 -eq 2 ]
    then
        case $2 in
            -h | --help)
                LoadHostHelp
                exit;;
            *)
                echo "${RED}Error:${NC} Invalid option!"
                echo "${RED}Error:${NC} Command load:host doesn't have option \"$2\""
                exit;;
        esac
    fi

    if [ $1 -gt 2 ]
    then
        echo "${RED}Error:${NC} Too much arguments passed after command load:host"
        exit
    fi
}

#################################
# LoadHostHelp                  #
#################################
LoadHostHelp()
{
    # Display help
    printf "${YELLOW}Description:${NC}\n"
    printf "  Load hosts name\n"
    printf "${YELLOW}Usage:${NC}\n"
    printf "    ${GREEN}./domore-cli load:host [option]${NC}\n"
    printf "${YELLOW}Option:${NC}\n"
    printf "    ${GREEN}-h, --help${NC}             Display this help message\n"
}

#################################
# LoadPackage                   #
#################################
LoadPackage()
{
    if [ $1 -eq 1 ]
    then
        docker-compose exec app composer install
        docker-compose exec app php artisan key:generate
        npm install
        npm run dev
        exit
    fi

    if [ $1 -eq 2 ]
    then
        case $2 in
            -h | --help)
                LoadPackageHelp
                exit;;
            *)
                echo "${RED}Error:${NC} Invalid option!"
                echo "${RED}Error:${NC} Command load:package doesn't have option \"$2\""
                exit;;
        esac
    fi

    if [ $1 -gt 2 ]
    then
        echo "${RED}Error:${NC} Too much arguments passed after command load:package"
        exit
    fi
}

#################################
# LoadPackageHelp                  #
#################################
LoadPackageHelp()
{
    # Display help
    printf "${YELLOW}Description:${NC}\n"
    printf "  Load neccessary packages\n"
    printf "${YELLOW}Usage:${NC}\n"
    printf "    ${GREEN}./domore-cli load:package [option]${NC}\n"
    printf "${YELLOW}Option:${NC}\n"
    printf "    ${GREEN}-h, --help${NC}             Display this help message\n"
}

#################################
# Main                          #
#################################

# Set variables

# Check if option is not passed
if [ $# -eq 0 ]
then
echo "${RED}Error:${NC} Missing options!"
echo "(run $0 -h for help)"
echo ""
exit
fi

# case options
case $1 in
    init:file)
        InitFile $# $2
        Init $2
        exit;;
    init:ip)
        InitIP $# $2
        exit;;
    load:db)
        LoadDB $# $2 $3
        exit;;
    load:env)
        LoadENV $# $2
        ;;
    load:host)
        LoadHost $# $2
        ;;
    load:package)
        LoadPackage $# $2
        ;;
    -h | --help)  # display help
        Help
        exit;;
    *) # Invalid option
        echo "${RED}Error: Invalid option!${NC}"
        exit;;
esac
